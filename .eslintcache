[{"/Users/brook/Desktop/code/react-quiz/react-quiz/src/index.tsx":"1","/Users/brook/Desktop/code/react-quiz/react-quiz/src/reportWebVitals.ts":"2","/Users/brook/Desktop/code/react-quiz/react-quiz/src/App.tsx":"3","/Users/brook/Desktop/code/react-quiz/react-quiz/src/components/QuestionCard.tsx":"4","/Users/brook/Desktop/code/react-quiz/react-quiz/src/API.ts":"5","/Users/brook/Desktop/code/react-quiz/react-quiz/src/utils.ts":"6","/Users/brook/Desktop/code/react-quiz/react-quiz/src/App.styles.ts":"7","/Users/brook/Desktop/code/react-quiz/react-quiz/src/components/QuestionCard.styles.ts":"8"},{"size":478,"mtime":1610434949153,"results":"9","hashOfConfig":"10"},{"size":425,"mtime":1610434635265,"results":"11","hashOfConfig":"10"},{"size":3248,"mtime":1610527253345,"results":"12","hashOfConfig":"10"},{"size":1135,"mtime":1610528702964,"results":"13","hashOfConfig":"10"},{"size":888,"mtime":1610521663907,"results":"14","hashOfConfig":"10"},{"size":90,"mtime":1610521514358,"results":"15","hashOfConfig":"10"},{"size":1487,"mtime":1610527780985,"results":"16","hashOfConfig":"10"},{"size":1063,"mtime":1610529372527,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"3610a6",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/brook/Desktop/code/react-quiz/react-quiz/src/index.tsx",[],["37","38"],"/Users/brook/Desktop/code/react-quiz/react-quiz/src/reportWebVitals.ts",[],"/Users/brook/Desktop/code/react-quiz/react-quiz/src/App.tsx",["39"],"import React, { useState } from \"react\";\nimport { fetchQuizQuestions } from \"./API\";\nimport { shuffleArray } from \"./utils\";\n\n// Components\nimport QuestionCard from \"./components/QuestionCard\";\n\n// Types\nimport { QuestionState, Difficulty } from \"./API\";\n\n// Styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n  question: string;\n  answer: string;\n  correct: boolean;\n  correctAnswer: string;\n};\n\n// Globals\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n  //Set initial states for the props (Hooks)\n  const [loading, setLoading] = useState(false);\n  const [questions, setQuestions] = useState<QuestionState[]>([]);\n  const [number, setNumber] = useState(0);\n  const [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n  const [score, setScore] = useState(0);\n  const [gameOver, setGameOver] = useState(true);\n\n  console.log(questions);\n\n  const startTrivia = async () => {\n    // Start the Game\n    setLoading(true);\n    setGameOver(false);\n\n    const newQuestions = await fetchQuizQuestions(TOTAL_QUESTIONS, Difficulty.HARD);\n\n    setQuestions(newQuestions);\n    setScore(0);\n    setUserAnswers([]);\n    setNumber(0);\n    setLoading(false);\n  };\n\n  const checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n    // Check if the user answer is correct or not\n    if (!gameOver) {\n      // Users answer\n      const answer = e.currentTarget.value;\n      // Check user answer against correct answer\n      const correct = questions[number].correct_answer === answer;\n      // Add score if user answer is correct\n      if (correct) setScore((prev) => prev + 1);\n      // Save answer in the array for user answers\n      const answerObject = {\n        question: questions[number].question,\n        answer,\n        correct,\n        correctAnswer: questions[number].correct_answer,\n      };\n      setUserAnswers((prev) => [...prev, answerObject]);\n    }\n  };\n\n  const nextQuestion = () => {\n    // Move on to the next question if not the last question\n    const nextQuestion = number + 1;\n\n    if (nextQuestion === TOTAL_QUESTIONS) {\n      setGameOver(true);\n    } else {\n      setNumber(nextQuestion);\n    }\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <Wrapper className=\"App\">\n        <h1>REACT QUIZ</h1>\n        {gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n          <button className=\"start\" onClick={startTrivia}>\n            Start\n          </button>\n        ) : null}\n        {!gameOver ? <p className=\"score\">Score: {score * 100}</p> : null}\n        {loading && <p>Loading Questions...</p>}\n        {!loading && !gameOver && (\n          <QuestionCard\n            questionNumber={number + 1}\n            totalQuestions={TOTAL_QUESTIONS}\n            question={questions[number].question}\n            answers={questions[number].answers}\n            userAnswer={userAnswers ? userAnswers[number] : undefined}\n            callback={checkAnswer}\n          />\n        )}\n        {!loading &&\n        !gameOver &&\n        userAnswers.length === number + 1 &&\n        number !== TOTAL_QUESTIONS - 1 ? (\n          <button className=\"next\" onClick={nextQuestion}>\n            Next Question\n          </button>\n        ) : null}\n      </Wrapper>\n    </>\n  );\n};\n\nexport default App;\n","/Users/brook/Desktop/code/react-quiz/react-quiz/src/components/QuestionCard.tsx",[],"/Users/brook/Desktop/code/react-quiz/react-quiz/src/API.ts",["40"],"import { type } from \"os\";\nimport { shuffleArray } from \"./utils\";\n\n// Question types\nexport type Question = {\n  category: string;\n  correct_answer: string;\n  difficulty: string;\n  incorrect_answers: string[];\n  question: string;\n  type: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\n// Quiz difficulty modes\nexport enum Difficulty {\n  EASY = \"easy\",\n  MEDIUM = \"medium\",\n  HARD = \"hard\",\n}\n\n// Fetch the questions from the API\nexport const fetchQuizQuestions = async (amount: number, difficulty: Difficulty) => {\n  const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n  const data = await (await fetch(endpoint)).json();\n  console.log(data);\n  return data.results.map((question: Question) => ({\n    ...question,\n    answers: shuffleArray([...question.incorrect_answers, question.correct_answer]),\n  }));\n};\n","/Users/brook/Desktop/code/react-quiz/react-quiz/src/utils.ts",[],"/Users/brook/Desktop/code/react-quiz/react-quiz/src/App.styles.ts",[],"/Users/brook/Desktop/code/react-quiz/react-quiz/src/components/QuestionCard.styles.ts",[],{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","severity":1,"message":"46","line":3,"column":10,"nodeType":"47","messageId":"48","endLine":3,"endColumn":22},{"ruleId":"45","severity":1,"message":"49","line":1,"column":10,"nodeType":"47","messageId":"48","endLine":1,"endColumn":14},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"@typescript-eslint/no-unused-vars","'shuffleArray' is defined but never used.","Identifier","unusedVar","'type' is defined but never used.","no-global-assign","no-unsafe-negation"]